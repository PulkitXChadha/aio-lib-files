<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="203" failures="0" time="2.052">
  <testsuite name="init" errors="0" failures="0" skipped="0" timestamp="2020-09-22T02:19:11" time="1.024" tests="6">
    <testcase classname="init when passing azure credentials (owned by user) with azure config" name="init when passing azure credentials (owned by user) with azure config" time="0.009">
    </testcase>
    <testcase classname="init when passing openwhisk credentials when tvm options" name="init when passing openwhisk credentials when tvm options" time="0.002">
    </testcase>
    <testcase classname="init when passing openwhisk credentials when empty config to be able to pass OW creds as env variables" name="init when passing openwhisk credentials when empty config to be able to pass OW creds as env variables" time="0.001">
    </testcase>
    <testcase classname="init when passing openwhisk credentials when tvm rejects with a 401 (throws wrapped error)" name="init when passing openwhisk credentials when tvm rejects with a 401 (throws wrapped error)" time="0.007">
    </testcase>
    <testcase classname="init when passing openwhisk credentials when tvm rejects with a 403 (throws wrapped error)" name="init when passing openwhisk credentials when tvm rejects with a 403 (throws wrapped error)" time="0.002">
    </testcase>
    <testcase classname="init when passing openwhisk credentials when tvm rejects with another status code (throws tvm error)" name="init when passing openwhisk credentials when tvm rejects with another status code (throws tvm error)" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="init" errors="0" failures="0" skipped="0" timestamp="2020-09-22T02:19:11" time="1.107" tests="44">
    <testcase classname="init with bad args when called with no arguments" name="init with bad args when called with no arguments" time="0.046">
    </testcase>
    <testcase classname="init with bad args when called with incomplete SAS credentials" name="init with bad args when called with incomplete SAS credentials" time="0.008">
    </testcase>
    <testcase classname="init with bad args when called with incomplete user credentials" name="init with bad args when called with incomplete user credentials" time="0.002">
    </testcase>
    <testcase classname="init with bad args when called with both sas and user credentials" name="init with bad args when called with both sas and user credentials" time="0.002">
    </testcase>
    <testcase classname="init with azure storage account credentials when public/private blob containers do not exist" name="init with azure storage account credentials when public/private blob containers do not exist" time="0.003">
    </testcase>
    <testcase classname="init with azure storage account credentials when blob containers already exist" name="init with azure storage account credentials when blob containers already exist" time="0.004">
    </testcase>
    <testcase classname="init with azure storage account credentials when there is a provider error on blob container creation" name="init with azure storage account credentials when there is a provider error on blob container creation" time="0.013">
    </testcase>
    <testcase classname="init with azure SAS credentials" name="init with azure SAS credentials" time="0.001">
    </testcase>
    <testcase classname="_fileExists when it exists" name="_fileExists when it exists" time="0.002">
    </testcase>
    <testcase classname="_fileExists when it does not exists" name="_fileExists when it does not exists" time="0.001">
    </testcase>
    <testcase classname="_fileExists when there is a provider error on azure.BlockBlobURL.getProperties" name="_fileExists when there is a provider error on azure.BlockBlobURL.getProperties" time="0.002">
    </testcase>
    <testcase classname="_listFolder when it is the root (empty string)" name="_listFolder when it is the root (empty string)" time="0.003">
    </testcase>
    <testcase classname="_listFolder when it is a private" name="_listFolder when it is a private" time="0.001">
    </testcase>
    <testcase classname="_listFolder when it is a public" name="_listFolder when it is a public" time="0.001">
    </testcase>
    <testcase classname="_listFolder when multiple calls are needed to list all files" name="_listFolder when multiple calls are needed to list all files" time="0.001">
    </testcase>
    <testcase classname="_listFolder when azure.ContainerURL.list rejects with an error" name="_listFolder when azure.ContainerURL.list rejects with an error" time="0.002">
    </testcase>
    <testcase classname="_deleteFile a file that exists" name="_deleteFile a file that exists" time="0">
    </testcase>
    <testcase classname="_deleteFile when azure.BlockBlobURL.delete rejects with an error, including file not exists (404)" name="_deleteFile when azure.BlockBlobURL.delete rejects with an error, including file not exists (404)" time="0.003">
    </testcase>
    <testcase classname="_createReadStream w default options ({ position: 0, length: undefined })" name="_createReadStream w default options ({ position: 0, length: undefined })" time="0.001">
    </testcase>
    <testcase classname="_createReadStream with options" name="_createReadStream with options" time="0.002">
    </testcase>
    <testcase classname="_createReadStream when azure.BlockBlobURL.download rejects with an error, including file not exists (404)" name="_createReadStream when azure.BlockBlobURL.download rejects with an error, including file not exists (404)" time="0.002">
    </testcase>
    <testcase classname="_createReadStream when azure.BlockBlobURL.download rejects with a 416 error because of out of range position" name="_createReadStream when azure.BlockBlobURL.download rejects with a 416 error because of out of range position" time="0.001">
    </testcase>
    <testcase classname="_writeBuffer when file has valid mime type file extension" name="_writeBuffer when file has valid mime type file extension" time="0.002">
    </testcase>
    <testcase classname="_writeBuffer when file has invalid mime type file extension" name="_writeBuffer when file has invalid mime type file extension" time="0.003">
    </testcase>
    <testcase classname="_writeBuffer when file has no file extension" name="_writeBuffer when file has no file extension" time="0.001">
    </testcase>
    <testcase classname="_writeBuffer when azure.BlockBlobURL throws an error" name="_writeBuffer when azure.BlockBlobURL throws an error" time="0.002">
    </testcase>
    <testcase classname="_writeStream when file has valid mime type file extension" name="_writeStream when file has valid mime type file extension" time="0.002">
    </testcase>
    <testcase classname="_writeStream when file has invalid mime type file extension" name="_writeStream when file has invalid mime type file extension" time="0.002">
    </testcase>
    <testcase classname="_writeStream when file has no file extension" name="_writeStream when file has no file extension" time="0.001">
    </testcase>
    <testcase classname="_writeStream when azure.uploadStreamToBlockBlob throws an error" name="_writeStream when azure.uploadStreamToBlockBlob throws an error" time="0.002">
    </testcase>
    <testcase classname="_createWriteStream with file with html extension, write multiple chunks and end the stream" name="_createWriteStream with file with html extension, write multiple chunks and end the stream" time="0.003">
    </testcase>
    <testcase classname="_createWriteStream when stream is written and azure.uploadStreamToBlockBlob rejects an error" name="_createWriteStream when stream is written and azure.uploadStreamToBlockBlob rejects an error" time="0.001">
    </testcase>
    <testcase classname="_createWriteStream when stream is written and azure.uploadStreamToBlockBlob rejects with 403" name="_createWriteStream when stream is written and azure.uploadStreamToBlockBlob rejects with 403" time="0.002">
    </testcase>
    <testcase classname="_copyRemoteToRemoteFile when source file exists" name="_copyRemoteToRemoteFile when source file exists" time="0.001">
    </testcase>
    <testcase classname="_copyRemoteToRemoteFile when azure.uploadStreamToBlockBlob throws an error" name="_copyRemoteToRemoteFile when azure.uploadStreamToBlockBlob throws an error" time="0.002">
    </testcase>
    <testcase classname="_getUrl url with no query args" name="_getUrl url with no query args" time="0.001">
    </testcase>
    <testcase classname="_getUrl url with query args" name="_getUrl url with query args" time="0.001">
    </testcase>
    <testcase classname="_getPresignUrl _getPresignUrl with no options" name="_getPresignUrl _getPresignUrl with no options" time="0.001">
    </testcase>
    <testcase classname="_getPresignUrl _getPresignUrl with missing options" name="_getPresignUrl _getPresignUrl with missing options" time="0.001">
    </testcase>
    <testcase classname="_getPresignUrl _getPresignUrl with correct options default permission" name="_getPresignUrl _getPresignUrl with correct options default permission" time="0.001">
    </testcase>
    <testcase classname="_getPresignUrl _getPresignUrl with correct options explicit permissions" name="_getPresignUrl _getPresignUrl with correct options explicit permissions" time="0.001">
    </testcase>
    <testcase classname="_statusFromProviderError error has no response field" name="_statusFromProviderError error has no response field" time="0.001">
    </testcase>
    <testcase classname="_statusFromProviderError error has no response.status field" name="_statusFromProviderError error has no response.status field" time="0.001">
    </testcase>
    <testcase classname="_statusFromProviderError error has response.status field" name="_statusFromProviderError error has response.status field" time="0">
    </testcase>
  </testsuite>
  <testsuite name="init" errors="0" failures="0" skipped="0" timestamp="2020-09-22T02:19:11" time="1.14" tests="153">
    <testcase classname="init missing implementation" name="init missing implementation" time="0.04">
    </testcase>
    <testcase classname="constructor missing implementation" name="constructor missing implementation" time="0.001">
    </testcase>
    <testcase classname="list missing _fileExists implementation" name="list missing _fileExists implementation" time="0.005">
    </testcase>
    <testcase classname="list missing _listFolder implementation" name="list missing _listFolder implementation" time="0.001">
    </testcase>
    <testcase classname="list _fileExists and _listFolder mock implementations when path is not a valid string" name="list _fileExists and _listFolder mock implementations when path is not a valid string" time="0.005">
    </testcase>
    <testcase classname="list _fileExists and _listFolder mock implementations when path is an existing file with a non normalized path" name="list _fileExists and _listFolder mock implementations when path is an existing file with a non normalized path" time="0">
    </testcase>
    <testcase classname="list _fileExists and _listFolder mock implementations when path is a non existing file" name="list _fileExists and _listFolder mock implementations when path is a non existing file" time="0.001">
    </testcase>
    <testcase classname="list _fileExists and _listFolder mock implementations when path is undefined (root folder)" name="list _fileExists and _listFolder mock implementations when path is undefined (root folder)" time="0.001">
    </testcase>
    <testcase classname="list _fileExists and _listFolder mock implementations when path is / (root folder)" name="list _fileExists and _listFolder mock implementations when path is / (root folder)" time="0.001">
    </testcase>
    <testcase classname="list _fileExists and _listFolder mock implementations when path is &apos;&apos; (root folder)" name="list _fileExists and _listFolder mock implementations when path is &apos;&apos; (root folder)" time="0.001">
    </testcase>
    <testcase classname="list _fileExists and _listFolder mock implementations when path is &apos;.&apos; (root folder)" name="list _fileExists and _listFolder mock implementations when path is &apos;.&apos; (root folder)" time="0">
    </testcase>
    <testcase classname="list _fileExists and _listFolder mock implementations when path is a non normalized directory" name="list _fileExists and _listFolder mock implementations when path is a non normalized directory" time="0.001">
    </testcase>
    <testcase classname="list _fileExists and _listFolder mock implementations when path is an empty directory" name="list _fileExists and _listFolder mock implementations when path is an empty directory" time="0">
    </testcase>
    <testcase classname="delete missing _deleteFile implementation" name="delete missing _deleteFile implementation" time="0.004">
    </testcase>
    <testcase classname="delete list and _deleteFile mock implementations when path is not a valid string" name="delete list and _deleteFile mock implementations when path is not a valid string" time="0.007">
    </testcase>
    <testcase classname="delete list and _deleteFile mock implementations when progressCallback is not a valid function" name="delete list and _deleteFile mock implementations when progressCallback is not a valid function" time="0.001">
    </testcase>
    <testcase classname="delete list and _deleteFile mock implementations with a bad option" name="delete list and _deleteFile mock implementations with a bad option" time="0.002">
    </testcase>
    <testcase classname="delete list and _deleteFile mock implementations delete a single file without progress callback" name="delete list and _deleteFile mock implementations delete a single file without progress callback" time="0.001">
    </testcase>
    <testcase classname="delete list and _deleteFile mock implementations delete multiple files without progress callback" name="delete list and _deleteFile mock implementations delete multiple files without progress callback" time="0.001">
    </testcase>
    <testcase classname="delete list and _deleteFile mock implementations delete a single file with progress callback" name="delete list and _deleteFile mock implementations delete a single file with progress callback" time="0.001">
    </testcase>
    <testcase classname="delete list and _deleteFile mock implementations delete multiple files with progress callback" name="delete list and _deleteFile mock implementations delete multiple files with progress callback" time="0.001">
    </testcase>
    <testcase classname="createReadStream missing _createReadStream implementation" name="createReadStream missing _createReadStream implementation" time="0.004">
    </testcase>
    <testcase classname="createReadStream _createReadStream mock implementations when path is not a valid string" name="createReadStream _createReadStream mock implementations when path is not a valid string" time="0.001">
    </testcase>
    <testcase classname="createReadStream _createReadStream mock implementations when path is undefined" name="createReadStream _createReadStream mock implementations when path is undefined" time="0.002">
    </testcase>
    <testcase classname="createReadStream _createReadStream mock implementations when path is a dir (not allowed)" name="createReadStream _createReadStream mock implementations when path is a dir (not allowed)" time="0.001">
    </testcase>
    <testcase classname="createReadStream _createReadStream mock implementations when options.position is not a number" name="createReadStream _createReadStream mock implementations when options.position is not a number" time="0.002">
    </testcase>
    <testcase classname="createReadStream _createReadStream mock implementations when options.length is not a number" name="createReadStream _createReadStream mock implementations when options.length is not a number" time="0.002">
    </testcase>
    <testcase classname="createReadStream _createReadStream mock implementations when options.position is smaller than 0" name="createReadStream _createReadStream mock implementations when options.position is smaller than 0" time="0.002">
    </testcase>
    <testcase classname="createReadStream _createReadStream mock implementations when options.length is smaller than 0" name="createReadStream _createReadStream mock implementations when options.length is smaller than 0" time="0.001">
    </testcase>
    <testcase classname="createReadStream _createReadStream mock implementations with a bad option" name="createReadStream _createReadStream mock implementations with a bad option" time="0.002">
    </testcase>
    <testcase classname="createReadStream _createReadStream mock implementations when options are undefined and path is non normalized" name="createReadStream _createReadStream mock implementations when options are undefined and path is non normalized" time="0.001">
    </testcase>
    <testcase classname="createReadStream _createReadStream mock implementations when options.position is a number" name="createReadStream _createReadStream mock implementations when options.position is a number" time="0.001">
    </testcase>
    <testcase classname="createReadStream _createReadStream mock implementations when options.length is a number" name="createReadStream _createReadStream mock implementations when options.length is a number" time="0">
    </testcase>
    <testcase classname="createReadStream _createReadStream mock implementations when options.length and options.positions are numbers" name="createReadStream _createReadStream mock implementations when options.length and options.positions are numbers" time="0.001">
    </testcase>
    <testcase classname="createWriteStream missing _createWriteStream implementation" name="createWriteStream missing _createWriteStream implementation" time="0.002">
    </testcase>
    <testcase classname="createWriteStream _createWriteStream mock implementations when path is not a valid string" name="createWriteStream _createWriteStream mock implementations when path is not a valid string" time="0.001">
    </testcase>
    <testcase classname="createWriteStream _createWriteStream mock implementations when path is undefined" name="createWriteStream _createWriteStream mock implementations when path is undefined" time="0.001">
    </testcase>
    <testcase classname="createWriteStream _createWriteStream mock implementations when path is a dir (not allowed)" name="createWriteStream _createWriteStream mock implementations when path is a dir (not allowed)" time="0.001">
    </testcase>
    <testcase classname="createWriteStream _createWriteStream mock implementations when file is a non normalized path" name="createWriteStream _createWriteStream mock implementations when file is a non normalized path" time="0.001">
    </testcase>
    <testcase classname="read missing _createReadStream implementation" name="read missing _createReadStream implementation" time="0.001">
    </testcase>
    <testcase classname="read createReadStream mock implementation read file" name="read createReadStream mock implementation read file" time="0.003">
    </testcase>
    <testcase classname="write missing _writeBuffer implementation" name="write missing _writeBuffer implementation" time="0.005">
    </testcase>
    <testcase classname="write missing _writeStream implementation" name="write missing _writeStream implementation" time="0.005">
    </testcase>
    <testcase classname="write _writeBuffer and _writeStream mock implementations when path is not a valid string" name="write _writeBuffer and _writeStream mock implementations when path is not a valid string" time="0.001">
    </testcase>
    <testcase classname="write _writeBuffer and _writeStream mock implementations when path undefined" name="write _writeBuffer and _writeStream mock implementations when path undefined" time="0.001">
    </testcase>
    <testcase classname="write _writeBuffer and _writeStream mock implementations when content is undefined" name="write _writeBuffer and _writeStream mock implementations when content is undefined" time="0.002">
    </testcase>
    <testcase classname="write _writeBuffer and _writeStream mock implementations when content is null" name="write _writeBuffer and _writeStream mock implementations when content is null" time="0.002">
    </testcase>
    <testcase classname="write _writeBuffer and _writeStream mock implementations when content is a number" name="write _writeBuffer and _writeStream mock implementations when content is a number" time="0.001">
    </testcase>
    <testcase classname="write _writeBuffer and _writeStream mock implementations when path is a dir (not allowed)" name="write _writeBuffer and _writeStream mock implementations when path is a dir (not allowed)" time="0.001">
    </testcase>
    <testcase classname="write _writeBuffer and _writeStream mock implementations when file is a non normalized path and content is a string" name="write _writeBuffer and _writeStream mock implementations when file is a non normalized path and content is a string" time="0.001">
    </testcase>
    <testcase classname="write _writeBuffer and _writeStream mock implementations when content is a buffer" name="write _writeBuffer and _writeStream mock implementations when content is a buffer" time="0.001">
    </testcase>
    <testcase classname="write _writeBuffer and _writeStream mock implementations when content is a readable stream" name="write _writeBuffer and _writeStream mock implementations when content is a readable stream" time="0.001">
    </testcase>
    <testcase classname="getProperties missing _getUrl implementation" name="getProperties missing _getUrl implementation" time="0.001">
    </testcase>
    <testcase classname="getProperties _getUrl mock implementation when path is not a valid string" name="getProperties _getUrl mock implementation when path is not a valid string" time="0.001">
    </testcase>
    <testcase classname="getProperties _getUrl mock implementation when path undefined" name="getProperties _getUrl mock implementation when path undefined" time="0.001">
    </testcase>
    <testcase classname="getProperties _getUrl mock implementation when filePath is non normalized" name="getProperties _getUrl mock implementation when filePath is non normalized" time="0.001">
    </testcase>
    <testcase classname="getProperties _getUrl mock implementation when filePath is a private file" name="getProperties _getUrl mock implementation when filePath is a private file" time="0">
    </testcase>
    <testcase classname="getProperties _getUrl mock implementation when filePath is a public file" name="getProperties _getUrl mock implementation when filePath is a public file" time="0">
    </testcase>
    <testcase classname="getProperties _getUrl mock implementation when filePath is a private path starting with `public` (publicisnotpublicfile.txt)" name="getProperties _getUrl mock implementation when filePath is a private path starting with `public` (publicisnotpublicfile.txt)" time="0.001">
    </testcase>
    <testcase classname="getProperties _getUrl mock implementation when filePath is a public dir" name="getProperties _getUrl mock implementation when filePath is a public dir" time="0">
    </testcase>
    <testcase classname="getProperties _getUrl mock implementation when filePath is a private dir" name="getProperties _getUrl mock implementation when filePath is a private dir" time="0">
    </testcase>
    <testcase classname="getProperties _getUrl mock implementation when filePath is public root (public)" name="getProperties _getUrl mock implementation when filePath is public root (public)" time="0.001">
    </testcase>
    <testcase classname="getProperties _getUrl mock implementation when filePath is root (&quot;&quot; or /)" name="getProperties _getUrl mock implementation when filePath is root (&quot;&quot; or /)" time="0">
    </testcase>
    <testcase classname=" missing _statusFromProviderError implementation" name=" missing _statusFromProviderError implementation" time="0.001">
    </testcase>
    <testcase classname="copy missing _copyRemoteToRemoteFile (for remote/remote case)" name="copy missing _copyRemoteToRemoteFile (for remote/remote case)" time="0.001">
    </testcase>
    <testcase classname="copy bad input when srcPath is not a valid string" name="copy bad input when srcPath is not a valid string" time="0.001">
    </testcase>
    <testcase classname="copy bad input when destPath is not a valid string" name="copy bad input when destPath is not a valid string" time="0.001">
    </testcase>
    <testcase classname="copy bad input when srcPath is undefined" name="copy bad input when srcPath is undefined" time="0.001">
    </testcase>
    <testcase classname="copy bad input when destPath undefined" name="copy bad input when destPath undefined" time="0">
    </testcase>
    <testcase classname="copy bad input when options.noOverwrite is not a boolean" name="copy bad input when options.noOverwrite is not a boolean" time="0.002">
    </testcase>
    <testcase classname="copy bad input when options.localSrc is not a boolean" name="copy bad input when options.localSrc is not a boolean" time="0.001">
    </testcase>
    <testcase classname="copy bad input when options.localDest is not a boolean" name="copy bad input when options.localDest is not a boolean" time="0.001">
    </testcase>
    <testcase classname="copy bad input when options.progressCallback is not a function" name="copy bad input when options.progressCallback is not a function" time="0.001">
    </testcase>
    <testcase classname="copy bad input when both options.localSrc and options.localDest are specified" name="copy bad input when both options.localSrc and options.localDest are specified" time="0.002">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src does not exist" name="copy copy logic remote &lt;-&gt; remote when src does not exist" time="0.002">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src is a file and dest does not exist" name="copy copy logic remote &lt;-&gt; remote when src is a file and dest does not exist" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src is a dir and dest does not exist (dir/)" name="copy copy logic remote &lt;-&gt; remote when src is a dir and dest does not exist (dir/)" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src is a dir and dest does not exist (file)" name="copy copy logic remote &lt;-&gt; remote when src is a dir and dest does not exist (file)" time="0.002">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src and dest are files" name="copy copy logic remote &lt;-&gt; remote when src and dest are files" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src and dest are files and noOverwrite set to true and progressCallback is set" name="copy copy logic remote &lt;-&gt; remote when src and dest are files and noOverwrite set to true and progressCallback is set" time="0.002">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src and dest are files and progressCallback is set" name="copy copy logic remote &lt;-&gt; remote when src and dest are files and progressCallback is set" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src is a file and dest is an existing dir containing a different file" name="copy copy logic remote &lt;-&gt; remote when src is a file and dest is an existing dir containing a different file" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src is a file and dest is an existing dir containing a different file and noOverwrite and progressCallback" name="copy copy logic remote &lt;-&gt; remote when src is a file and dest is an existing dir containing a different file and noOverwrite and progressCallback" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src is a file and dest is an existing dir with same name as file" name="copy copy logic remote &lt;-&gt; remote when src is a file and dest is an existing dir with same name as file" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src is a file and dest is an existing dir which contain the same file name" name="copy copy logic remote &lt;-&gt; remote when src is a file and dest is an existing dir which contain the same file name" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src is a file and dest is an existing dir which contain the same file name and noOverwrite = true" name="copy copy logic remote &lt;-&gt; remote when src is a file and dest is an existing dir which contain the same file name and noOverwrite = true" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src is a file and dest has a subdir with the same file name and noOverwrite = true" name="copy copy logic remote &lt;-&gt; remote when src is a file and dest has a subdir with the same file name and noOverwrite = true" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src and dest are dirs containing different files" name="copy copy logic remote &lt;-&gt; remote when src and dest are dirs containing different files" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src and dest are dirs containing same files and dest ends with /" name="copy copy logic remote &lt;-&gt; remote when src and dest are dirs containing same files and dest ends with /" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src and dest are dirs containing same files and dest ends with / and noOverwrite and progressCallback are set" name="copy copy logic remote &lt;-&gt; remote when src and dest are dirs containing same files and dest ends with / and noOverwrite and progressCallback are set" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src and dest are dirs and dest contains subfolder with src basname with same files and dest ends with /" name="copy copy logic remote &lt;-&gt; remote when src and dest are dirs and dest contains subfolder with src basname with same files and dest ends with /" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src and dest are dirs and dest contains subfolder with src basename with same files and dest ends with / and noOverwrite and progressCallback are set" name="copy copy logic remote &lt;-&gt; remote when src and dest are dirs and dest contains subfolder with src basename with same files and dest ends with / and noOverwrite and progressCallback are set" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src and dest are dirs containing same files but dest does not end with `/`" name="copy copy logic remote &lt;-&gt; remote when src and dest are dirs containing same files but dest does not end with `/`" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src and dest are dirs containing same files but dest does not end with `/` and **noOverwrite** and progressCallback are set" name="copy copy logic remote &lt;-&gt; remote when src and dest are dirs containing same files but dest does not end with `/` and **noOverwrite** and progressCallback are set" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src and dest are dirs and dest does not end with `/` and contains 2 files that are contained by src and **noOverwrite** and progressCallback are set" name="copy copy logic remote &lt;-&gt; remote when src and dest are dirs and dest does not end with `/` and contains 2 files that are contained by src and **noOverwrite** and progressCallback are set" time="0">
    </testcase>
    <testcase classname="copy copy logic remote &lt;-&gt; remote when src is a dir and dest an existing file and noOverwrite and progressCallback are set" name="copy copy logic remote &lt;-&gt; remote when src is a dir and dest an existing file and noOverwrite and progressCallback are set" time="0">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src does not exist" name="copy copy logic local -&gt; remote when src does not exist" time="0.001">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src is a file and dest does not exist" name="copy copy logic local -&gt; remote when src is a file and dest does not exist" time="0.002">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src is a dir and dest does not exist (dir/)" name="copy copy logic local -&gt; remote when src is a dir and dest does not exist (dir/)" time="0.002">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src is a dir and dest does not exist (file)" name="copy copy logic local -&gt; remote when src is a dir and dest does not exist (file)" time="0.001">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src and dest are files" name="copy copy logic local -&gt; remote when src and dest are files" time="0.002">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src and dest are files and noOverwrite set to true and progressCallback is set" name="copy copy logic local -&gt; remote when src and dest are files and noOverwrite set to true and progressCallback is set" time="0.001">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src and dest are files and progressCallback is set" name="copy copy logic local -&gt; remote when src and dest are files and progressCallback is set" time="0.001">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src is a file and dest is an existing dir containing a different file" name="copy copy logic local -&gt; remote when src is a file and dest is an existing dir containing a different file" time="0.001">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src is a file and dest is an existing dir containing a different file and noOverwrite and progressCallback" name="copy copy logic local -&gt; remote when src is a file and dest is an existing dir containing a different file and noOverwrite and progressCallback" time="0.001">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src is a file and dest is an existing dir with same name as file" name="copy copy logic local -&gt; remote when src is a file and dest is an existing dir with same name as file" time="0.001">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src is a file and dest is an existing dir which contain the same file name" name="copy copy logic local -&gt; remote when src is a file and dest is an existing dir which contain the same file name" time="0.002">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src is a file and dest is an existing dir which contain the same file name and noOverwrite = true" name="copy copy logic local -&gt; remote when src is a file and dest is an existing dir which contain the same file name and noOverwrite = true" time="0.001">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src is a file and dest has a subdir with the same file name and noOverwrite = true" name="copy copy logic local -&gt; remote when src is a file and dest has a subdir with the same file name and noOverwrite = true" time="0.001">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src and dest are dirs containing different files" name="copy copy logic local -&gt; remote when src and dest are dirs containing different files" time="0.001">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src and dest are dirs containing same files and dest ends with /" name="copy copy logic local -&gt; remote when src and dest are dirs containing same files and dest ends with /" time="0.002">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src and dest are dirs containing same files and dest ends with / and noOverwrite and progressCallback are set" name="copy copy logic local -&gt; remote when src and dest are dirs containing same files and dest ends with / and noOverwrite and progressCallback are set" time="0.001">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src and dest are dirs and dest contains subfolder with src basname with same files and dest ends with /" name="copy copy logic local -&gt; remote when src and dest are dirs and dest contains subfolder with src basname with same files and dest ends with /" time="0.001">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src and dest are dirs and dest contains subfolder with src basename with same files and dest ends with / and noOverwrite and progressCallback are set" name="copy copy logic local -&gt; remote when src and dest are dirs and dest contains subfolder with src basename with same files and dest ends with / and noOverwrite and progressCallback are set" time="0.001">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src and dest are dirs containing same files but dest does not end with `/`" name="copy copy logic local -&gt; remote when src and dest are dirs containing same files but dest does not end with `/`" time="0.002">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src and dest are dirs containing same files but dest does not end with `/` and **noOverwrite** and progressCallback are set" name="copy copy logic local -&gt; remote when src and dest are dirs containing same files but dest does not end with `/` and **noOverwrite** and progressCallback are set" time="0.001">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src and dest are dirs and dest does not end with `/` and contains 2 files that are contained by src and **noOverwrite** and progressCallback are set" name="copy copy logic local -&gt; remote when src and dest are dirs and dest does not end with `/` and contains 2 files that are contained by src and **noOverwrite** and progressCallback are set" time="0.002">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote when src is a dir and dest an existing file and noOverwrite and progressCallback are set" name="copy copy logic local -&gt; remote when src is a dir and dest an existing file and noOverwrite and progressCallback are set" time="0.002">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote local src is symlink" name="copy copy logic local -&gt; remote local src is symlink" time="0.001">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote local src is a directory containing a symlink" name="copy copy logic local -&gt; remote local src is a directory containing a symlink" time="0.001">
    </testcase>
    <testcase classname="copy copy logic local -&gt; remote fs.stat throws other error than ENOENT" name="copy copy logic local -&gt; remote fs.stat throws other error than ENOENT" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src does not exist" name="copy copy logic remote -&gt; local when src does not exist" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src is a file and dest does not exist" name="copy copy logic remote -&gt; local when src is a file and dest does not exist" time="0.003">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src is a dir and dest does not exist (dir/)" name="copy copy logic remote -&gt; local when src is a dir and dest does not exist (dir/)" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src is a dir and dest does not exist (file)" name="copy copy logic remote -&gt; local when src is a dir and dest does not exist (file)" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src and dest are files" name="copy copy logic remote -&gt; local when src and dest are files" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src and dest are files and noOverwrite set to true and progressCallback is set" name="copy copy logic remote -&gt; local when src and dest are files and noOverwrite set to true and progressCallback is set" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src and dest are files and progressCallback is set" name="copy copy logic remote -&gt; local when src and dest are files and progressCallback is set" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src is a file and dest is an existing dir containing a different file" name="copy copy logic remote -&gt; local when src is a file and dest is an existing dir containing a different file" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src is a file and dest is an existing dir containing a different file and noOverwrite and progressCallback" name="copy copy logic remote -&gt; local when src is a file and dest is an existing dir containing a different file and noOverwrite and progressCallback" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src is a file and dest is an existing dir with same name as file" name="copy copy logic remote -&gt; local when src is a file and dest is an existing dir with same name as file" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src is a file and dest is an existing dir which contain the same file name" name="copy copy logic remote -&gt; local when src is a file and dest is an existing dir which contain the same file name" time="0.002">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src is a file and dest is an existing dir which contain the same file name and noOverwrite = true" name="copy copy logic remote -&gt; local when src is a file and dest is an existing dir which contain the same file name and noOverwrite = true" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src is a file and dest has a subdir with the same file name and noOverwrite = true" name="copy copy logic remote -&gt; local when src is a file and dest has a subdir with the same file name and noOverwrite = true" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src and dest are dirs containing different files" name="copy copy logic remote -&gt; local when src and dest are dirs containing different files" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src and dest are dirs containing same files and dest ends with /" name="copy copy logic remote -&gt; local when src and dest are dirs containing same files and dest ends with /" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src and dest are dirs containing same files and dest ends with / and noOverwrite and progressCallback are set" name="copy copy logic remote -&gt; local when src and dest are dirs containing same files and dest ends with / and noOverwrite and progressCallback are set" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src and dest are dirs and dest contains subfolder with src basname with same files and dest ends with /" name="copy copy logic remote -&gt; local when src and dest are dirs and dest contains subfolder with src basname with same files and dest ends with /" time="0.002">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src and dest are dirs and dest contains subfolder with src basename with same files and dest ends with / and noOverwrite and progressCallback are set" name="copy copy logic remote -&gt; local when src and dest are dirs and dest contains subfolder with src basename with same files and dest ends with / and noOverwrite and progressCallback are set" time="0">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src and dest are dirs containing same files but dest does not end with `/`" name="copy copy logic remote -&gt; local when src and dest are dirs containing same files but dest does not end with `/`" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src and dest are dirs containing same files but dest does not end with `/` and **noOverwrite** and progressCallback are set" name="copy copy logic remote -&gt; local when src and dest are dirs containing same files but dest does not end with `/` and **noOverwrite** and progressCallback are set" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src and dest are dirs and dest does not end with `/` and contains 2 files that are contained by src and **noOverwrite** and progressCallback are set" name="copy copy logic remote -&gt; local when src and dest are dirs and dest does not end with `/` and contains 2 files that are contained by src and **noOverwrite** and progressCallback are set" time="0.002">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local when src is a dir and dest an existing file and noOverwrite and progressCallback are set" name="copy copy logic remote -&gt; local when src is a dir and dest an existing file and noOverwrite and progressCallback are set" time="0.001">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local local dest is symlink" name="copy copy logic remote -&gt; local local dest is symlink" time="0.002">
    </testcase>
    <testcase classname="copy copy logic remote -&gt; local fs.stat throws other error than ENOENT" name="copy copy logic remote -&gt; local fs.stat throws other error than ENOENT" time="0.001">
    </testcase>
    <testcase classname="generatePresignURL missing _getPresignUrl implementation" name="generatePresignURL missing _getPresignUrl implementation" time="0">
    </testcase>
    <testcase classname="generatePresignURL _getPresignUrl mock implementation when path is not a valid string" name="generatePresignURL _getPresignUrl mock implementation when path is not a valid string" time="0.001">
    </testcase>
    <testcase classname="generatePresignURL _getPresignUrl mock implementation when path undefined" name="generatePresignURL _getPresignUrl mock implementation when path undefined" time="0.001">
    </testcase>
    <testcase classname="generatePresignURL _getPresignUrl mock implementation when filePath is non normalized" name="generatePresignURL _getPresignUrl mock implementation when filePath is non normalized" time="0.001">
    </testcase>
    <testcase classname="generatePresignURL _getPresignUrl mock implementation when filePath is a private file" name="generatePresignURL _getPresignUrl mock implementation when filePath is a private file" time="0.001">
    </testcase>
    <testcase classname="generatePresignURL _getPresignUrl mock implementation when filePath is a public file" name="generatePresignURL _getPresignUrl mock implementation when filePath is a public file" time="0.001">
    </testcase>
    <testcase classname="generatePresignURL _getPresignUrl mock implementation when filePath is a private path starting with `public` (publicisnotpublicfile.txt)" name="generatePresignURL _getPresignUrl mock implementation when filePath is a private path starting with `public` (publicisnotpublicfile.txt)" time="0">
    </testcase>
    <testcase classname="generatePresignURL _getPresignUrl mock implementation when filePath is a public dir" name="generatePresignURL _getPresignUrl mock implementation when filePath is a public dir" time="0.001">
    </testcase>
  </testsuite>
</testsuites>